I"º,<h1 id="identifying-and-characterizing-heterogeneity-in-single-cell-rna-seq-data">Identifying and Characterizing Heterogeneity in Single Cell RNA-seq Data</h1>

<p>In this tutorial, we will become familiar with a few computational
techniques we can use to identify and characterize heterogeneity in
single cell RNA-seq data. Pre-prepared data for this tutorial can 
be found as part of the <a href="https://github.com/hms-dbmi/scw/tree/master/scw2016/data">Single Cell Genomics 2016 Workshop I did</a> at Harvard Medical School.</p>

<h2 id="getting-started">Getting started</h2>

<p>A single cell dataset from <a href="http:/www.pnas.org/content/112/51/15672">Camp et
al.</a> has been pre-prepared for
you. The data is provided as a matrix of gene counts, where each column
corresponds to a cell and each row a gene.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s1">'../../data/cd.RData'</span><span class="p">)</span><span class="w"> 

</span><span class="c1"># how many genes? how many cells?</span><span class="w">
</span><span class="nf">dim</span><span class="p">(</span><span class="n">cd</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 23228   224
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># look at snippet of data</span><span class="w">
</span><span class="n">cd</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="p">,</span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##             SRR2967608 SRR2967609 SRR2967610 SRR2967611 SRR2967612
## 1/2-SBSRNA4          1         18          0          0          0
## A1BG                 0          0          2          0          0
## A1BG-AS1             0          0          0          0          0
## A1CF                 0          0          0          0          0
## A2LD1                0          0          0          0          0
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># filter out low-gene cells (often empty wells)</span><span class="w">
</span><span class="n">cd</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cd</span><span class="p">[,</span><span class="w"> </span><span class="n">colSums</span><span class="p">(</span><span class="n">cd</span><span class="o">&gt;</span><span class="m">0</span><span class="p">)</span><span class="o">&gt;</span><span class="m">1.8e3</span><span class="p">]</span><span class="w">
</span><span class="c1"># remove genes that don't have many reads</span><span class="w">
</span><span class="n">cd</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cd</span><span class="p">[</span><span class="n">rowSums</span><span class="p">(</span><span class="n">cd</span><span class="p">)</span><span class="o">&gt;</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="c1"># remove genes that are not seen in a sufficient number of cells</span><span class="w">
</span><span class="n">cd</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cd</span><span class="p">[</span><span class="n">rowSums</span><span class="p">(</span><span class="n">cd</span><span class="o">&gt;</span><span class="m">0</span><span class="p">)</span><span class="o">&gt;</span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">

</span><span class="c1"># how many genes and cells after filtering?</span><span class="w">
</span><span class="nf">dim</span><span class="p">(</span><span class="n">cd</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 12453   224
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># transform to make more data normal</span><span class="w">
</span><span class="n">mat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">log10</span><span class="p">(</span><span class="n">as.matrix</span><span class="p">(</span><span class="n">cd</span><span class="p">)</span><span class="m">+1</span><span class="p">)</span><span class="w">
</span><span class="c1"># look at snippet of data</span><span class="w">
</span><span class="n">mat</span><span class="p">[</span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="m">5</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##             SRR2967608 SRR2967609 SRR2967610 SRR2967611 SRR2967612
## 1/2-SBSRNA4  0.3010300   1.278754  0.0000000          0   0.000000
## A1BG         0.0000000   0.000000  0.4771213          0   0.000000
## A2M          0.0000000   0.000000  0.0000000          0   0.000000
## A2MP1        0.0000000   0.000000  0.0000000          0   0.000000
## AAAS         0.4771213   1.959041  0.0000000          0   1.361728
</code></pre></div></div>

<p>In the original publication, the authors proposed two main
subpopulations: neurons and neuroprogenitor cells (NPCs). These labels
have also been provided to you as a reference so we can see how
different methods perform in recapitulating these labels.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s1">'../../data/sg.RData'</span><span class="p">)</span><span class="w"> 
</span><span class="n">head</span><span class="p">(</span><span class="n">sg</span><span class="p">,</span><span class="w"> </span><span class="m">5</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## SRR2967608 SRR2967609 SRR2967610 SRR2967611 SRR2967612 
##     neuron     neuron     neuron        npc     neuron 
## Levels: neuron npc
</code></pre></div></div>

<h2 id="pca">PCA</h2>

<p>Note that there are over 10,000 genes that can be used to cluster cells
into subpopulations. One common technique to identify subpopulations is
by using dimensionality reduction to summarize the data into 2
dimensions and then visually identify obvious clusters. <a href="https:/en.wikipedia.org/wiki/Principal_component_analysis">Principal
component analysis
(PCA)</a> is a
linear dimensionality reduction method.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># use principal component analysis for dimensionality reduction</span><span class="w">
</span><span class="n">base.pca</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">prcomp</span><span class="p">(</span><span class="n">t</span><span class="p">(</span><span class="n">mat</span><span class="p">))</span><span class="w">
</span><span class="c1"># visualize in 2D the first two principal components and color by cell type</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">base.pca</span><span class="o">$</span><span class="n">x</span><span class="p">[,</span><span class="m">1</span><span class="p">],</span><span class="w"> </span><span class="n">base.pca</span><span class="o">$</span><span class="n">x</span><span class="p">[,</span><span class="m">2</span><span class="p">],</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="n">rainbow</span><span class="p">(</span><span class="m">2</span><span class="p">)[</span><span class="n">sg</span><span class="p">],</span><span class="w"> </span><span class="n">pch</span><span class="o">=</span><span class="m">16</span><span class="p">,</span><span class="w"> </span><span class="n">main</span><span class="o">=</span><span class="s1">'PCA'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://localhost:4000/assets/blog/pca-1.png" class="img-responsive" /></p>

<p>The PCA clearly separates the two annotated subpopulations. However, we
can see some additional aspects of heterogeneity driving the first
principal componenent. Coloring each cell by its library size reveals
that this first component is being driven by variation in library size,
which, in this case, can be interpreted as technical noise as opposed to
biological insight.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lib.size</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colSums</span><span class="p">(</span><span class="n">mat</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">base.pca</span><span class="o">$</span><span class="n">x</span><span class="p">[,</span><span class="m">1</span><span class="p">],</span><span class="w"> </span><span class="n">base.pca</span><span class="o">$</span><span class="n">x</span><span class="p">[,</span><span class="m">2</span><span class="p">],</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="n">colorRampPalette</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"magenta"</span><span class="p">,</span><span class="w"> </span><span class="s2">"yellow"</span><span class="p">))(</span><span class="m">100</span><span class="p">)[</span><span class="nf">round</span><span class="p">(</span><span class="n">lib.size</span><span class="o">/</span><span class="nf">max</span><span class="p">(</span><span class="n">lib.size</span><span class="p">)</span><span class="o">*</span><span class="m">100</span><span class="p">)],</span><span class="w"> </span><span class="n">pch</span><span class="o">=</span><span class="m">16</span><span class="p">,</span><span class="w"> </span><span class="n">main</span><span class="o">=</span><span class="s1">'PCA'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://localhost:4000/assets/blog/pca-2-1.png" class="img-responsive" /></p>

<p>So we should always double check for obvious, non-biological factors
(such as library size, batch, patient/mouse, etc), potentially
influencing or driving observed heterogeneity.</p>

<h2 id="tsne">tSNE</h2>

<p><a href="https:/lvdmaaten.github.io/tsne/">T-embedded stochastic neighbor embedding
(tSNE)</a> is a non-linear
dimensionality reduction method. Note that in tSNE, the perplexity
parameter is an estimate of the number of effective neighbors. Here, we
have 224 cells. A perplexity of 10 is suitable. For larger or smaller
numbers of cells, you will want to change the perplexity accordingly.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">Rtsne</span><span class="p">)</span><span class="w">
</span><span class="n">d</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">dist</span><span class="p">(</span><span class="n">t</span><span class="p">(</span><span class="n">mat</span><span class="p">))</span><span class="w">
</span><span class="n">set.seed</span><span class="p">(</span><span class="m">0</span><span class="p">)</span><span class="w"> </span><span class="c1"># tsne has some stochastic steps (gradient descent) so need to set random </span><span class="w">
</span><span class="n">tsne_out</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">Rtsne</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="w"> </span><span class="n">is_distance</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">perplexity</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">verbose</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w"> 
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Read the 224 x 224 data matrix successfully!
## Using no_dims = 2, perplexity = 10.000000, and theta = 0.500000
## Computing input similarities...
## Building tree...
##  - point 0 of 224
## Done in 0.01 seconds (sparsity = 0.243025)!
## Learning embedding...
## Iteration 50: error is 118.973680 (50 iterations in 0.06 seconds)
## Iteration 100: error is 127.558911 (50 iterations in 0.06 seconds)
## Iteration 150: error is 123.943221 (50 iterations in 0.07 seconds)
## Iteration 200: error is 130.050267 (50 iterations in 0.06 seconds)
## Iteration 250: error is 127.913196 (50 iterations in 0.08 seconds)
## Iteration 300: error is 3.617403 (50 iterations in 0.06 seconds)
## Iteration 350: error is 2.286202 (50 iterations in 0.04 seconds)
## Iteration 400: error is 2.190548 (50 iterations in 0.04 seconds)
## Iteration 450: error is 2.133582 (50 iterations in 0.04 seconds)
## Iteration 500: error is 2.086473 (50 iterations in 0.04 seconds)
## Iteration 550: error is 2.060643 (50 iterations in 0.04 seconds)
## Iteration 600: error is 2.031325 (50 iterations in 0.04 seconds)
## Iteration 650: error is 1.983069 (50 iterations in 0.04 seconds)
## Iteration 700: error is 1.846377 (50 iterations in 0.04 seconds)
## Iteration 750: error is 1.827168 (50 iterations in 0.05 seconds)
## Iteration 800: error is 1.825835 (50 iterations in 0.05 seconds)
## Iteration 850: error is 1.825061 (50 iterations in 0.05 seconds)
## Iteration 900: error is 1.825387 (50 iterations in 0.04 seconds)
## Iteration 950: error is 1.824545 (50 iterations in 0.05 seconds)
## Iteration 1000: error is 1.823723 (50 iterations in 0.04 seconds)
## Fitting performed in 0.98 seconds.
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">tsne_out</span><span class="o">$</span><span class="n">Y</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="n">rainbow</span><span class="p">(</span><span class="m">2</span><span class="p">)[</span><span class="n">sg</span><span class="p">],</span><span class="w"> </span><span class="n">pch</span><span class="o">=</span><span class="m">16</span><span class="p">,</span><span class="w"> </span><span class="n">main</span><span class="o">=</span><span class="s1">'tSNE'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://localhost:4000/assets/blog/tsne-1.png" class="img-responsive" /></p>

<p>Note with tSNE, your results are stochastic. Change the random seed,
change your results. (If you donât use a random seed at all, your
results will be different every time! So always use a random seed to
ensure reproducable research!)</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">set.seed</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="w"> </span><span class="c1"># tsne has some stochastic steps (gradient descent) so need to set random </span><span class="w">
</span><span class="n">tsne_out</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">Rtsne</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="w"> </span><span class="n">is_distance</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">perplexity</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">verbose</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w"> 
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## Read the 224 x 224 data matrix successfully!
## Using no_dims = 2, perplexity = 10.000000, and theta = 0.500000
## Computing input similarities...
## Building tree...
##  - point 0 of 224
## Done in 0.01 seconds (sparsity = 0.243025)!
## Learning embedding...
## Iteration 50: error is 123.486260 (50 iterations in 0.06 seconds)
## Iteration 100: error is 127.644744 (50 iterations in 0.07 seconds)
## Iteration 150: error is 125.135074 (50 iterations in 0.06 seconds)
## Iteration 200: error is 129.868562 (50 iterations in 0.06 seconds)
## Iteration 250: error is 138.279847 (50 iterations in 0.06 seconds)
## Iteration 300: error is 4.395593 (50 iterations in 0.05 seconds)
## Iteration 350: error is 3.569927 (50 iterations in 0.05 seconds)
## Iteration 400: error is 2.725121 (50 iterations in 0.05 seconds)
## Iteration 450: error is 2.243356 (50 iterations in 0.04 seconds)
## Iteration 500: error is 2.204841 (50 iterations in 0.04 seconds)
## Iteration 550: error is 2.168027 (50 iterations in 0.04 seconds)
## Iteration 600: error is 2.136227 (50 iterations in 0.03 seconds)
## Iteration 650: error is 2.094058 (50 iterations in 0.03 seconds)
## Iteration 700: error is 2.045998 (50 iterations in 0.04 seconds)
## Iteration 750: error is 2.039275 (50 iterations in 0.04 seconds)
## Iteration 800: error is 2.028664 (50 iterations in 0.04 seconds)
## Iteration 850: error is 2.007481 (50 iterations in 0.04 seconds)
## Iteration 900: error is 1.976311 (50 iterations in 0.03 seconds)
## Iteration 950: error is 1.926869 (50 iterations in 0.03 seconds)
## Iteration 1000: error is 1.835692 (50 iterations in 0.04 seconds)
## Fitting performed in 0.90 seconds.
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot</span><span class="p">(</span><span class="n">tsne_out</span><span class="o">$</span><span class="n">Y</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="n">rainbow</span><span class="p">(</span><span class="m">2</span><span class="p">)[</span><span class="n">sg</span><span class="p">],</span><span class="w"> </span><span class="n">pch</span><span class="o">=</span><span class="m">16</span><span class="p">,</span><span class="w"> </span><span class="n">main</span><span class="o">=</span><span class="s1">'tSNE'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://localhost:4000/assets/blog/tsne-2-1.png" class="img-responsive" /></p>

<p>In general, the annotated subpopulations from these tSNE results are not
particularly clear-cut.</p>

<p>Still, we may be wondering what genes and pathways characterize these
subpopulation? For that, additional analysis is often needed and
dimensionality reduction alone does not provide us with such insight.</p>

<h2 id="pathway-and-gene-set-overdispersion-analysis-pagoda">Pathway and gene set overdispersion analysis (<code class="highlighter-rouge">PAGODA</code>)</h2>

<p>Additionally, we may be interested in finer, potentially
overlapping/non-binary subpopulations. For example, if we were
clustering apples, PCA might separate red apples from green apples, but
we may be interested in sweet vs. sour apples, or high fiber apples from
low fiber apples. Similarly, in single cells, there may be such
overlapping aspects of heterogeneity that are of biological interest.
<code class="highlighter-rouge">PAGODA</code> is a method developed by the Kharchenko lab that enables
identification and characterization of subpopulations in a manner that
resolves these overlapping aspects of transcriptional heterogeneity. For
more information, please refer to the original manuscript by <a href="http:/www.nature.com/nmeth/journal/v13/n3/full/nmeth.3734.html">Fan et
al</a>.
<code class="highlighter-rouge">PAGODA</code> functions are implemented as part of the <code class="highlighter-rouge">scde</code> package.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">scde</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Each cell is modeled using a mixture of a negative binomial (NB)
distribution (for the amplified/detected transcripts) and low-level
Poisson distribution (for the unobserved or background-level signal of
genes that failed to amplify or were not detected for other reasons).
These models can then be used to identify robustly differentially
expressed genes.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># EVALUATION NOT NEEDED FOR SAKE OF TIME</span><span class="w">
</span><span class="n">knn</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">knn.error.models</span><span class="p">(</span><span class="n">cd</span><span class="p">,</span><span class="w"> </span><span class="n">k</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ncol</span><span class="p">(</span><span class="n">cd</span><span class="p">)</span><span class="o">/</span><span class="m">4</span><span class="p">,</span><span class="w"> </span><span class="n">n.cores</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">min.count.threshold</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">min.nonfailed</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="n">max.model.plots</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">10</span><span class="p">)</span><span class="w">

</span><span class="c1"># just load from what we precomputed for you</span><span class="w">
</span><span class="n">load</span><span class="p">(</span><span class="s1">'../../data/knn.RData'</span><span class="p">)</span><span class="w"> 
</span><span class="n">head</span><span class="p">(</span><span class="n">knn</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><code class="highlighter-rouge">PAGODA</code> relies on accurate quantification of excess variance or
overdispersion in genes and gene sets in order to cluster cells and
identify subpopulations. Accurate quantification of this overdispersion
means that we must normalize out expected levels of technical and
intrinsic biological noise. Intuitively, lowly-expressed genes are often
more prone to drop-out and thus may exhibit large variances simply due
to such technical noise.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># EVALUATION NOT NEEDED FOR SAKE OF TIME</span><span class="w">
</span><span class="n">varinfo</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pagoda.varnorm</span><span class="p">(</span><span class="n">knn</span><span class="p">,</span><span class="w"> </span><span class="n">counts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cd</span><span class="p">,</span><span class="w"> </span><span class="n">trim</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">3</span><span class="o">/</span><span class="n">ncol</span><span class="p">(</span><span class="n">cd</span><span class="p">),</span><span class="w"> </span><span class="n">max.adj.var</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">5</span><span class="p">,</span><span class="w"> </span><span class="n">n.cores</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">plot</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="c1"># normalize out library size as well</span><span class="w">
</span><span class="n">varinfo</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pagoda.subtract.aspect</span><span class="p">(</span><span class="n">varinfo</span><span class="p">,</span><span class="w"> </span><span class="n">colSums</span><span class="p">(</span><span class="n">cd</span><span class="p">[,</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">knn</span><span class="p">)]</span><span class="o">&gt;</span><span class="m">0</span><span class="p">))</span><span class="w">

</span><span class="c1"># just load from what we precomputed for you</span><span class="w">
</span><span class="n">load</span><span class="p">(</span><span class="s1">'../../data/varinfo.RData'</span><span class="p">)</span><span class="w">
</span><span class="nf">names</span><span class="p">(</span><span class="n">varinfo</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] "mat"     "matw"    "arv"     "modes"   "avmodes" "prior"   "edf"    
## [8] "batch"   "trim"
</code></pre></div></div>

<p>Briefly, <code class="highlighter-rouge">mat</code> is the new normalized gene expression matrix, You can use
<code class="highlighter-rouge">?pagoda.varnorm</code> to learn more about the <code class="highlighter-rouge">varinfo</code> object.</p>

<p>When assessing for overdispersion in gene sets, we can take advantage of
pre-defined pathway gene sets such as GO annotations and look for
pathways that exhibit statistically significant excess of coordinated
variability. Intuitively, if a pathway is differentially perturbed, we
expect all genes within said pathway to be upregulated or downregulated
in the same group of cells. In <code class="highlighter-rouge">PAGODA</code>, for each gene set, we test
whether the amount of variance explained by the first principal
component significantly exceed the background expectation.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load gene sets</span><span class="w">
</span><span class="n">load</span><span class="p">(</span><span class="s1">'../../data/go.env.RData'</span><span class="p">)</span><span class="w">
</span><span class="c1"># look at some gene sets</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">ls</span><span class="p">(</span><span class="n">go.env</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] "GO:0000002 mitochondrial genome maintenance"            
## [2] "GO:0000012 single strand break repair"                  
## [3] "GO:0000018 regulation of DNA recombination"             
## [4] "GO:0000030 mannosyltransferase activity"                
## [5] "GO:0000038 very long-chain fatty acid metabolic process"
## [6] "GO:0000041 transition metal ion transport"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># look at genes in gene set</span><span class="w">
</span><span class="n">get</span><span class="p">(</span><span class="s2">"GO:0000002 mitochondrial genome maintenance"</span><span class="p">,</span><span class="w"> </span><span class="n">go.env</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] "AKT3"    "C10orf2" "DNA2"    "MEF2A"   "MPV17"   "PID1"    "SLC25A4"
## [8] "TYMP"
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># filter out gene sets that are too small or too big</span><span class="w">
</span><span class="n">go.env</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">list2env</span><span class="p">(</span><span class="n">clean.gos</span><span class="p">(</span><span class="n">go.env</span><span class="p">,</span><span class="w"> </span><span class="n">min.size</span><span class="o">=</span><span class="m">10</span><span class="p">,</span><span class="w"> </span><span class="n">max.size</span><span class="o">=</span><span class="m">100</span><span class="p">))</span><span class="w">
</span><span class="c1"># how many pathways</span><span class="w">
</span><span class="nf">length</span><span class="p">(</span><span class="n">go.env</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## [1] 3225
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># EVALUATION NOT NEEDED FOR SAKE OF TIME</span><span class="w">
</span><span class="c1"># pathway overdispersion</span><span class="w">
</span><span class="n">pwpca</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pagoda.pathway.wPCA</span><span class="p">(</span><span class="n">varinfo</span><span class="p">,</span><span class="w"> </span><span class="n">go.env</span><span class="p">,</span><span class="w"> </span><span class="n">n.components</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">n.cores</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Instead of relying on pre-defined pathways, we can also test on âde
novoâ gene sets whose expression profiles are well-correlated within the
given dataset. This is the most necessary and useful when the provided
annotated gene sets are poor or incomplete.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># EVALUATION NOT NEEDED FOR SAKE OF TIME</span><span class="w">
</span><span class="c1"># de novo gene sets</span><span class="w">
</span><span class="n">clpca</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pagoda.gene.clusters</span><span class="p">(</span><span class="n">varinfo</span><span class="p">,</span><span class="w"> </span><span class="n">trim</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">7.1</span><span class="o">/</span><span class="n">ncol</span><span class="p">(</span><span class="n">varinfo</span><span class="o">$</span><span class="n">mat</span><span class="p">),</span><span class="w"> </span><span class="n">n.clusters</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">150</span><span class="p">,</span><span class="w"> </span><span class="n">n.cores</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">plot</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Testing these pre-defined pathways and annotated gene sets may take a
few minutes so for the sake of time, we will load a pre-computed
version.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s1">'../../data/pwpca.RData'</span><span class="p">)</span><span class="w">
</span><span class="n">clpca</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="kc">NULL</span><span class="w"> </span><span class="c1"># For the sake of time, set to NULL</span><span class="w">
</span></code></pre></div></div>

<p>Taking into consideration (ideally) both pre-defined pathways and
de-novo gene sets, we can see which aspects of heterogeneity are the
most overdispersed and base our cell cluster only on the most
overdispersed and informative pathways and gene sets.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># get full info on the top aspects</span><span class="w">
</span><span class="n">df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pagoda.top.aspects</span><span class="p">(</span><span class="n">pwpca</span><span class="p">,</span><span class="w"> </span><span class="n">clpca</span><span class="p">,</span><span class="w"> </span><span class="n">z.score</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.96</span><span class="p">,</span><span class="w"> </span><span class="n">return.table</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">df</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##                                                    name npc   n    score
## 78  GO:0000779 condensed chromosome, centromeric region   1  24 4.689757
## 743                   GO:0007059 chromosome segregation   1  97 4.632092
## 17                           GO:0000087 mitotic M phase   1 198 4.606980
## 77          GO:0000777 condensed chromosome kinetochore   1  20 4.529740
## 746                 GO:0007067 mitotic nuclear division   1 189 4.506514
## 47                          GO:0000280 nuclear division   1 189 4.506514
##            z    adj.z sh.z adj.sh.z
## 78  22.64153 22.44831   NA       NA
## 743 33.07666 32.90101   NA       NA
## 17  40.87730 40.71825   NA       NA
## 77  20.85181 20.65224   NA       NA
## 746 39.43297 39.28004   NA       NA
## 47  39.43297 39.28004   NA       NA
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tam</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pagoda.top.aspects</span><span class="p">(</span><span class="n">pwpca</span><span class="p">,</span><span class="w"> </span><span class="n">clpca</span><span class="p">,</span><span class="w"> </span><span class="n">z.score</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1.96</span><span class="p">)</span><span class="w">
</span><span class="c1"># determine overall cell clustering</span><span class="w">
</span><span class="n">hc</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pagoda.cluster.cells</span><span class="p">(</span><span class="n">tam</span><span class="p">,</span><span class="w"> </span><span class="n">varinfo</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Because many of our annotated pathways and de novo gene sets likely
share many genes or exhibit similar patterns of variability, we must
reduce such redundancy to come up with a final coherent characterization
of subpopulations.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># reduce redundant aspects</span><span class="w">
</span><span class="n">tamr</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pagoda.reduce.loading.redundancy</span><span class="p">(</span><span class="n">tam</span><span class="p">,</span><span class="w"> </span><span class="n">pwpca</span><span class="p">,</span><span class="w"> </span><span class="n">clpca</span><span class="p">)</span><span class="w">
</span><span class="n">tamr2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pagoda.reduce.redundancy</span><span class="p">(</span><span class="n">tamr</span><span class="p">,</span><span class="w"> </span><span class="n">plot</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span><span class="c1"># view final result</span><span class="w">
</span><span class="n">pagoda.view.aspects</span><span class="p">(</span><span class="n">tamr2</span><span class="p">,</span><span class="w"> </span><span class="n">cell.clustering</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hc</span><span class="p">,</span><span class="w"> </span><span class="n">box</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">labCol</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">margins</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="m">0.5</span><span class="p">,</span><span class="w"> </span><span class="m">20</span><span class="p">),</span><span class="w"> </span><span class="n">col.cols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rbind</span><span class="p">(</span><span class="n">rainbow</span><span class="p">(</span><span class="m">2</span><span class="p">)[</span><span class="n">sg</span><span class="p">]),</span><span class="w"> </span><span class="n">top</span><span class="o">=</span><span class="m">10</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://localhost:4000/assets/blog/pagoda-tam-1.png" class="img-responsive" /></p>

<p>We can also use a 2D embedding of the cells to aid visualization.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">Rtsne</span><span class="p">)</span><span class="w">
</span><span class="c1"># recalculate clustering distance .. we'll need to specify return.details=T</span><span class="w">
</span><span class="n">cell.clustering</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">pagoda.cluster.cells</span><span class="p">(</span><span class="n">tam</span><span class="p">,</span><span class="w"> </span><span class="n">varinfo</span><span class="p">,</span><span class="w"> </span><span class="n">include.aspects</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">verbose</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">return.details</span><span class="o">=</span><span class="nb">T</span><span class="p">)</span><span class="w">

</span><span class="c1"># fix the seed to ensure reproducible results</span><span class="w">
</span><span class="n">set.seed</span><span class="p">(</span><span class="m">0</span><span class="p">)</span><span class="w">
</span><span class="n">tSNE.pagoda</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">Rtsne</span><span class="p">(</span><span class="n">cell.clustering</span><span class="o">$</span><span class="n">distance</span><span class="p">,</span><span class="w"> </span><span class="n">is_distance</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">perplexity</span><span class="o">=</span><span class="m">10</span><span class="p">)</span><span class="w">

</span><span class="c1"># plot</span><span class="w">
</span><span class="n">par</span><span class="p">(</span><span class="n">mfrow</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">),</span><span class="w"> </span><span class="n">mar</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="m">5</span><span class="p">,</span><span class="m">4</span><span class="p">))</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">tSNE.pagoda</span><span class="o">$</span><span class="n">Y</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="n">rainbow</span><span class="p">(</span><span class="m">2</span><span class="p">)[</span><span class="n">sg</span><span class="p">],</span><span class="w"> </span><span class="n">pch</span><span class="o">=</span><span class="m">16</span><span class="p">,</span><span class="w"> </span><span class="n">main</span><span class="o">=</span><span class="s1">'PAGODA tSNE'</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://localhost:4000/assets/blog/pagoda-tsne-1.png" class="img-responsive" /></p>

<p>By using variance normalization and incorporating pathway-level
information, our tSNE plot much more cleanly separates the two annotated
subpopulations!</p>

<p>We can also create an app to further interactively browse the results. A
pre-compiled app has been launched for you here:
<a href="http:/pklab.med.harvard.edu/cgi-bin/R/rook/scw.xiaochang/index.html">http:/pklab.med.harvard.edu/cgi-bin/R/rook/scw.xiaochang/index.html</a>.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># compile a browsable app</span><span class="w">
</span><span class="n">app</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">make.pagoda.app</span><span class="p">(</span><span class="n">tamr2</span><span class="p">,</span><span class="w"> </span><span class="n">tam</span><span class="p">,</span><span class="w"> </span><span class="n">varinfo</span><span class="p">,</span><span class="w"> </span><span class="n">go.env</span><span class="p">,</span><span class="w"> </span><span class="n">pwpca</span><span class="p">,</span><span class="w"> </span><span class="n">clpca</span><span class="p">,</span><span class="w"> </span><span class="n">col.cols</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rbind</span><span class="p">(</span><span class="n">sg</span><span class="p">),</span><span class="w"> </span><span class="n">cell.clustering</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hc</span><span class="p">,</span><span class="w"> </span><span class="n">title</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Camp"</span><span class="p">,</span><span class="w"> </span><span class="n">embedding</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tSNE.pagoda</span><span class="o">$</span><span class="n">Y</span><span class="p">)</span><span class="w">
</span><span class="c1"># show app in the browser (port 1468)</span><span class="w">
</span><span class="n">show.app</span><span class="p">(</span><span class="n">app</span><span class="p">,</span><span class="w"> </span><span class="s2">"Camp"</span><span class="p">,</span><span class="w"> </span><span class="n">browse</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">,</span><span class="w"> </span><span class="n">port</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1468</span><span class="p">)</span><span class="w">  
</span></code></pre></div></div>

<p>Based on these <code class="highlighter-rouge">PAGODA</code> results, we can see pathways and biological
processes driving the main division, which is consistent with previous
annotations of neurons vs NPCs, but we can also see further
heterogeneity not visible by PCA or tSNE alone. In this case, prior
knowledge with <a href="http://www.cell.com/fulltext/S0092-8674(16)30932-1">known marker genes</a> 
can allow us to better interpret these
identified subpopulations as <a href="https://github.com/JEFworks/figure-code-dump/tree/master/jcell201607025">IPCs, RGs, Immature Neurons, and Mature
Neurons</a>.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># visualize a few known markers</span><span class="w">
</span><span class="n">markers</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="w">
</span><span class="s2">"SCN2A"</span><span class="p">,</span><span class="s2">"GRIK3"</span><span class="p">,</span><span class="s2">"CDH6"</span><span class="p">,</span><span class="s2">"NRCAM"</span><span class="p">,</span><span class="s2">"SOX11"</span><span class="p">,</span><span class="w">
</span><span class="s2">"SLC24A2"</span><span class="p">,</span><span class="w"> </span><span class="s2">"SOX4"</span><span class="p">,</span><span class="w"> </span><span class="s2">"DCX"</span><span class="p">,</span><span class="w"> </span><span class="s2">"TUBB3"</span><span class="p">,</span><span class="s2">"MAPT"</span><span class="p">,</span><span class="w">
</span><span class="s2">"KHDRBS3"</span><span class="p">,</span><span class="w">  </span><span class="s2">"KHDRBS2"</span><span class="p">,</span><span class="w"> </span><span class="s2">"KHDRBS1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"RBFOX3"</span><span class="p">,</span><span class="w">
</span><span class="s2">"CELF6"</span><span class="p">,</span><span class="w"> </span><span class="s2">"CELF5"</span><span class="p">,</span><span class="w"> </span><span class="s2">"CELF4"</span><span class="p">,</span><span class="w"> </span><span class="s2">"CELF3"</span><span class="p">,</span><span class="w"> </span><span class="s2">"CELF2"</span><span class="p">,</span><span class="w"> </span><span class="s2">"CELF1"</span><span class="p">,</span><span class="w">
</span><span class="s2">"PTBP2"</span><span class="p">,</span><span class="w"> </span><span class="s2">"PTBP1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ZFP36L2"</span><span class="p">,</span><span class="w">
</span><span class="s2">"HMGN2"</span><span class="p">,</span><span class="w"> </span><span class="s2">"PAX6"</span><span class="p">,</span><span class="w"> </span><span class="s2">"SFRP1"</span><span class="p">,</span><span class="w">
</span><span class="s2">"SOX2"</span><span class="p">,</span><span class="w"> </span><span class="s2">"HES1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"NOTCH2"</span><span class="p">,</span><span class="w"> </span><span class="s2">"CLU"</span><span class="p">,</span><span class="s2">"HOPX"</span><span class="p">,</span><span class="w">
</span><span class="s2">"MKI67"</span><span class="p">,</span><span class="s2">"TPX2"</span><span class="p">,</span><span class="w">
</span><span class="s2">"EOMES"</span><span class="p">,</span><span class="w"> </span><span class="s2">"NEUROD4"</span><span class="p">,</span><span class="s2">"HES6"</span><span class="w">
</span><span class="p">)</span><span class="w">
</span><span class="c1"># heatmap for subset of gene markers</span><span class="w">
</span><span class="n">mat.sub</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">varinfo</span><span class="o">$</span><span class="n">mat</span><span class="p">[</span><span class="n">markers</span><span class="p">,]</span><span class="w">
</span><span class="n">mat.sub</span><span class="p">[</span><span class="n">mat.sub</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="m">-1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">-1</span><span class="w">
</span><span class="n">mat.sub</span><span class="p">[</span><span class="n">mat.sub</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="n">heatmap</span><span class="p">(</span><span class="n">mat.sub</span><span class="p">[,</span><span class="n">hc</span><span class="o">$</span><span class="n">labels</span><span class="p">],</span><span class="w"> </span><span class="n">Colv</span><span class="o">=</span><span class="n">as.dendrogram</span><span class="p">(</span><span class="n">hc</span><span class="p">),</span><span class="w"> </span><span class="n">Rowv</span><span class="o">=</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">scale</span><span class="o">=</span><span class="s2">"none"</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="n">colorRampPalette</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"blue"</span><span class="p">,</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w"> </span><span class="s2">"red"</span><span class="p">))(</span><span class="m">100</span><span class="p">),</span><span class="w"> </span><span class="n">ColSideColors</span><span class="o">=</span><span class="n">rainbow</span><span class="p">(</span><span class="m">2</span><span class="p">)[</span><span class="n">sg</span><span class="p">])</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://localhost:4000/assets/blog/pagoda-marker-1.png" class="img-responsive" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Alternatively, define more refined subpopulations</span><span class="w">
</span><span class="n">sg2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.factor</span><span class="p">(</span><span class="n">cutree</span><span class="p">(</span><span class="n">hc</span><span class="p">,</span><span class="w"> </span><span class="n">k</span><span class="o">=</span><span class="m">4</span><span class="p">))</span><span class="w">
</span><span class="nf">names</span><span class="p">(</span><span class="n">sg2</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">hc</span><span class="o">$</span><span class="n">labels</span><span class="w">
</span><span class="n">heatmap</span><span class="p">(</span><span class="n">mat.sub</span><span class="p">[,</span><span class="n">hc</span><span class="o">$</span><span class="n">labels</span><span class="p">],</span><span class="w"> </span><span class="n">Colv</span><span class="o">=</span><span class="n">as.dendrogram</span><span class="p">(</span><span class="n">hc</span><span class="p">),</span><span class="w"> </span><span class="n">Rowv</span><span class="o">=</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">scale</span><span class="o">=</span><span class="s2">"none"</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="n">colorRampPalette</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"blue"</span><span class="p">,</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w"> </span><span class="s2">"red"</span><span class="p">))(</span><span class="m">100</span><span class="p">),</span><span class="w"> </span><span class="n">ColSideColors</span><span class="o">=</span><span class="n">rainbow</span><span class="p">(</span><span class="m">4</span><span class="p">)[</span><span class="n">sg2</span><span class="p">])</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://localhost:4000/assets/blog/pagoda-marker-2.png" class="img-responsive" /></p>

<h2 id="differential-expression-analysis-with-scde">Differential expression analysis with <code class="highlighter-rouge">scde</code></h2>

<p>To further characterize identified subpopulations, we can identify
differentially expressed genes between the two groups of single cells
using <code class="highlighter-rouge">scde</code>. For more information, please refer to the original
manuscript by <a href="http:/www.nature.com/nmeth/journal/v11/n7/full/nmeth.2967.html">Kharchenko et
al</a>.</p>

<p>First, letâs pick which identified subpopulations we want to compare
using differential expression analysis.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.character</span><span class="p">(</span><span class="n">sg2</span><span class="p">)</span><span class="w">
</span><span class="n">test</span><span class="p">[</span><span class="n">test</span><span class="o">==</span><span class="m">2</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="kc">NA</span><span class="p">;</span><span class="w"> </span><span class="n">test</span><span class="p">[</span><span class="n">test</span><span class="o">==</span><span class="m">3</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="kc">NA</span><span class="w">
</span><span class="n">test</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.factor</span><span class="p">(</span><span class="n">test</span><span class="p">)</span><span class="w">
</span><span class="nf">names</span><span class="p">(</span><span class="n">test</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">names</span><span class="p">(</span><span class="n">sg2</span><span class="p">)</span><span class="w">
</span><span class="n">heatmap</span><span class="p">(</span><span class="n">mat.sub</span><span class="p">[,</span><span class="n">hc</span><span class="o">$</span><span class="n">labels</span><span class="p">],</span><span class="w"> </span><span class="n">Colv</span><span class="o">=</span><span class="n">as.dendrogram</span><span class="p">(</span><span class="n">hc</span><span class="p">),</span><span class="w"> </span><span class="n">Rowv</span><span class="o">=</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">scale</span><span class="o">=</span><span class="s2">"none"</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="n">colorRampPalette</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"blue"</span><span class="p">,</span><span class="w"> </span><span class="s2">"white"</span><span class="p">,</span><span class="w"> </span><span class="s2">"red"</span><span class="p">))(</span><span class="m">100</span><span class="p">),</span><span class="w"> </span><span class="n">ColSideColors</span><span class="o">=</span><span class="n">rainbow</span><span class="p">(</span><span class="m">4</span><span class="p">)[</span><span class="n">test</span><span class="p">])</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://localhost:4000/assets/blog/scde-1.png" class="img-responsive" /></p>

<p>Now, letâs use <code class="highlighter-rouge">scde</code> to identify differentially expressed genes.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># scde relies on the same error models</span><span class="w">
</span><span class="n">load</span><span class="p">(</span><span class="s1">'../../data/cd.RData'</span><span class="p">)</span><span class="w">
</span><span class="n">load</span><span class="p">(</span><span class="s1">'../../data/knn.RData'</span><span class="p">)</span><span class="w">

</span><span class="c1"># estimate gene expression prior</span><span class="w">
</span><span class="n">prior</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">scde.expression.prior</span><span class="p">(</span><span class="n">models</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">knn</span><span class="p">,</span><span class="w"> </span><span class="n">counts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">cd</span><span class="p">,</span><span class="w"> </span><span class="n">length.out</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">400</span><span class="p">,</span><span class="w"> </span><span class="n">show.plot</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w">

</span><span class="c1"># run differential expression tests on a subset of genes (to save time)</span><span class="w">
</span><span class="n">vi</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"BCL11B"</span><span class="p">,</span><span class="w"> </span><span class="s2">"CDH6"</span><span class="p">,</span><span class="w"> </span><span class="s2">"CNTNAP2"</span><span class="p">,</span><span class="w"> </span><span class="s2">"GRIK3"</span><span class="p">,</span><span class="w"> </span><span class="s2">"NEUROD6"</span><span class="p">,</span><span class="w"> </span><span class="s2">"RTN1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"RUNX1T1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"SERINC5"</span><span class="p">,</span><span class="w"> </span><span class="s2">"SLC24A2"</span><span class="p">,</span><span class="w"> </span><span class="s2">"STMN2"</span><span class="p">,</span><span class="w"> </span><span class="s2">"AIF1L"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ANP32E"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ARID3C"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ASPM"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ATP1A2"</span><span class="p">,</span><span class="w"> </span><span class="s2">"AURKB"</span><span class="p">,</span><span class="w"> </span><span class="s2">"AXL"</span><span class="p">,</span><span class="w"> </span><span class="s2">"BCAN"</span><span class="p">,</span><span class="w"> </span><span class="s2">"BDH2"</span><span class="p">,</span><span class="w"> </span><span class="s2">"C12orf48"</span><span class="p">)</span><span class="w">
</span><span class="n">ediff</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">scde.expression.difference</span><span class="p">(</span><span class="n">knn</span><span class="p">,</span><span class="w"> </span><span class="n">cd</span><span class="p">[</span><span class="n">vi</span><span class="p">,],</span><span class="w"> </span><span class="n">prior</span><span class="p">,</span><span class="w"> </span><span class="n">groups</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">test</span><span class="p">,</span><span class="w"> </span><span class="n">n.cores</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">verbose</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## comparing groups:
## 
##  1  4 
## 55 24 
## calculating difference posterior
## summarizing differences
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># top upregulated genes (tail would show top downregulated ones)</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">ediff</span><span class="p">[</span><span class="n">order</span><span class="p">(</span><span class="nf">abs</span><span class="p">(</span><span class="n">ediff</span><span class="o">$</span><span class="n">Z</span><span class="p">),</span><span class="w"> </span><span class="n">decreasing</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">),</span><span class="w"> </span><span class="p">])</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##                 lb       mle        ub        ce         Z        cZ
## STMN2     2.303137  3.207941  7.320687  2.303137  7.160408  6.827743
## CDH6      7.567451 10.076226 10.569755  7.567451  7.150820  6.827743
## CNTNAP2   2.385392  3.331324  8.472255  2.385392  7.048047  6.779055
## BCAN     -9.171422 -8.307745 -4.236128 -4.236128 -6.820435 -6.585346
## RUNX1T1   1.932990  2.673284  7.896471  1.932990  6.749579  6.545467
## ATP1A2  -10.117353 -9.294804 -7.649706 -7.649706 -6.580727 -6.399339
</code></pre></div></div>

<p>We can visualize the results for one gene. The top and the bottom plots
show expression posteriors derived from individual cells (colored lines)
and joint posteriors (black lines). The middle plot shows posterior of
the expression fold difference between the two cell groups, highlighting
the 95% credible interval by the red shading.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># visualize results for one gene</span><span class="w">
</span><span class="n">scde.test.gene.expression.difference</span><span class="p">(</span><span class="s2">"NEUROD6"</span><span class="p">,</span><span class="w"> </span><span class="n">knn</span><span class="p">,</span><span class="w"> </span><span class="n">cd</span><span class="p">,</span><span class="w"> </span><span class="n">prior</span><span class="p">,</span><span class="w"> </span><span class="n">groups</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">test</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://localhost:4000/assets/blog/scde-3-1.png" class="img-responsive" /></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##               lb     mle       ub       ce       Z      cZ
## NEUROD6 1.727353 2.59103 7.361814 1.727353 5.06557 5.06557
</code></pre></div></div>

<p>We can also cluster our cells by just the top 10 most differentially
upregulated genes in each subpopulation and visualize results with a
heatmap.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># heatmap</span><span class="w">
</span><span class="n">ediff.sig</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ediff</span><span class="p">[</span><span class="nf">abs</span><span class="p">(</span><span class="n">ediff</span><span class="o">$</span><span class="n">cZ</span><span class="p">)</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="m">1.96</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="n">ediff.sig.up</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">ediff.sig</span><span class="p">[</span><span class="n">order</span><span class="p">(</span><span class="n">ediff.sig</span><span class="o">$</span><span class="n">cZ</span><span class="p">,</span><span class="w"> </span><span class="n">decreasing</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">),</span><span class="w"> </span><span class="p">])[</span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="p">]</span><span class="w">
</span><span class="n">ediff.sig.down</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">ediff.sig</span><span class="p">[</span><span class="n">order</span><span class="p">(</span><span class="n">ediff.sig</span><span class="o">$</span><span class="n">cZ</span><span class="p">,</span><span class="w"> </span><span class="n">decreasing</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">),</span><span class="w"> </span><span class="p">])[</span><span class="m">1</span><span class="o">:</span><span class="m">10</span><span class="p">]</span><span class="w">
</span><span class="n">heatmap</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="nf">c</span><span class="p">(</span><span class="n">ediff.sig.up</span><span class="p">,</span><span class="w"> </span><span class="n">ediff.sig.down</span><span class="p">),</span><span class="w"> </span><span class="nf">names</span><span class="p">(</span><span class="n">na.omit</span><span class="p">(</span><span class="n">test</span><span class="p">))],</span><span class="w"> </span><span class="n">Rowv</span><span class="o">=</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">ColSideColors</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rainbow</span><span class="p">(</span><span class="m">4</span><span class="p">)[</span><span class="n">test</span><span class="p">[</span><span class="nf">names</span><span class="p">(</span><span class="n">na.omit</span><span class="p">(</span><span class="n">test</span><span class="p">))]],</span><span class="w">  </span><span class="n">col</span><span class="o">=</span><span class="n">colorRampPalette</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s1">'blue'</span><span class="p">,</span><span class="w"> </span><span class="s1">'white'</span><span class="p">,</span><span class="w"> </span><span class="s1">'red'</span><span class="p">))(</span><span class="m">100</span><span class="p">),</span><span class="w"> </span><span class="n">scale</span><span class="o">=</span><span class="s2">"none"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://localhost:4000/assets/blog/scde-4-1.png" class="img-responsive" /></p>

<p>Once we have a set of differentially expressed genes, we may use
techniques such as gene set enrichment analysis (GSEA) to determine
which pathways are differentially up or down regulated. GSEA is not
specific to single cell methods and not included in this session but
users are encouraged to check out this <a href="https:/github.com/JEFworks/liger">light-weight R implementation
with tutorials</a> on their own time.</p>

<h2 id="pseudo-time-trajectory-analysis-with-monocle">Pseudo-time trajectory analysis with <code class="highlighter-rouge">monocle</code></h2>

<p>Cells may not always fall into distinct subpopulations. Rather, they may
form a continuous gradient along a pseudo-time trajectory. To order
cells along their pseudo-time trajectory, we will use <code class="highlighter-rouge">monocle</code> from the
<a href="http:/www.nature.com/nbt/journal/v32/n4/full/nbt.2859.html">Trapnell
lab</a>.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">monocle</span><span class="p">)</span><span class="w">

</span><span class="c1"># monocle takes as input fpkms</span><span class="w">
</span><span class="n">load</span><span class="p">(</span><span class="s1">'../../data/fpm.RData'</span><span class="p">)</span><span class="w">
</span><span class="n">expression.data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">fpm</span><span class="w">

</span><span class="c1"># create pheno data object </span><span class="w">
</span><span class="n">pheno.data.df</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">type</span><span class="o">=</span><span class="n">sg</span><span class="p">[</span><span class="n">colnames</span><span class="p">(</span><span class="n">fpm</span><span class="p">)],</span><span class="w"> </span><span class="n">pagoda</span><span class="o">=</span><span class="n">sg2</span><span class="p">[</span><span class="n">colnames</span><span class="p">(</span><span class="n">fpm</span><span class="p">)])</span><span class="w"> 
</span><span class="n">pd</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">new</span><span class="p">(</span><span class="s1">'AnnotatedDataFrame'</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pheno.data.df</span><span class="p">)</span><span class="w"> 

</span><span class="c1"># convert data object needed for monocle</span><span class="w">
</span><span class="n">data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">newCellDataSet</span><span class="p">(</span><span class="n">expression.data</span><span class="p">,</span><span class="w"> </span><span class="n">phenoData</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">pd</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>Typically, to order cells by progress, we want to reduce the number of
genes analyzed. So we can select for a subset of genes that we believe
are important in setting said ordering, such as overdispersed genes. In
this example, we will simply choose genes based on prior knowledge.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ordering.genes</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">markers</span><span class="w"> </span><span class="c1"># Select genes used for ordering</span><span class="w">
</span><span class="n">data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">setOrderingFilter</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="w"> </span><span class="n">ordering.genes</span><span class="p">)</span><span class="w"> </span><span class="c1"># Set list of genes for ordering</span><span class="w">
</span><span class="n">data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">reduceDimension</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="w"> </span><span class="n">use_irlba</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w"> </span><span class="c1"># Reduce dimensionality</span><span class="w">
</span><span class="n">set.seed</span><span class="p">(</span><span class="m">0</span><span class="p">)</span><span class="w"> </span><span class="c1"># monocle is also stochastic</span><span class="w">
</span><span class="n">data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">orderCells</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="w"> </span><span class="n">num_paths</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">reverse</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">)</span><span class="w"> </span><span class="c1"># Order cells</span><span class="w">

</span><span class="c1"># Plot trajectory with inferred branches</span><span class="w">
</span><span class="n">plot_spanning_tree</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="w"> 
</span></code></pre></div></div>

<p><img src="http://localhost:4000/assets/blog/monocle-2-1.png" class="img-responsive" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Compare with previous annotations</span><span class="w">
</span><span class="n">plot_spanning_tree</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="w"> </span><span class="n">color_by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"type"</span><span class="p">)</span><span class="w"> 
</span></code></pre></div></div>

<p><img src="http://localhost:4000/assets/blog/monocle-2-2.png" class="img-responsive" /></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Compare with PAGODA annotations</span><span class="w">
</span><span class="n">plot_spanning_tree</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="w"> </span><span class="n">color_by</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"pagoda"</span><span class="p">)</span><span class="w"> 
</span></code></pre></div></div>

<p><img src="http://localhost:4000/assets/blog/monocle-2-3.png" class="img-responsive" /></p>

<p>Indeed, we can see how neuronal maturation from NPCs to neurons spans a
continuum along a single, non-branching trajectory. So do cells fall
into distinct subpopulations or are they continuously changing or
perhaps both? Just as with human life, age spans a continuum yet we fall
into distinct phases of childhood, adolescence, adulthood, and so on,
each marked by distinct characteristics. What do you think?</p>
:ET