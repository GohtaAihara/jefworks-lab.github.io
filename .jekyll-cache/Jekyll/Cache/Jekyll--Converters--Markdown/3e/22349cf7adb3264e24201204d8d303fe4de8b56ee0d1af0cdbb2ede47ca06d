I"(Ê<h1 id="feature-selection-for-differential-expression-analysis-and-marker-selection">Feature Selection for Differential Expression Analysis and Marker Selection</h1>

<h2 id="introduction">Introduction</h2>

<p>In transcriptomics analysis, we are often interested in identifying differentially expressed genes. For example, if we have two conditions or cell types, we may be interested in what genes are significantly upregulated in condition A vs. B or cell type X vs. Y and vice versa. Differential expression analysis is often performed as Wilcox tests, T-tests, or other similar tests for differences in distribution.</p>

<p>However, in many situations, such as in selecting marker genes for downstream validation of a potentially new cell subpopulation or in cell sorting, we not only want to identify genes that are differentially expressed in this subpopulation versus all other cell types, but we also want genes that, potentially in combiation, mark just this subpopulation and not any other cell type. So this starts to sound like a machine learning feature selection problem: what genes or features can be used to train a machine learning classifier to identify this subpopulation of cells?</p>

<p>In this tutorial, I will build upon my previous blog post on <a href="http://jef.works/blog/2017/05/31/multiclass-diffential-expression-analysis/">Multi-class / Multi-group Differential Expression Analysis</a>, using simulated data to demonstrate potential machine learning approaches to identify differentially expressed candidate marker genes.</p>

<h2 id="simulation">Simulation</h2>

<p>First, letâ€™s simulate some data. This is the basically the same simulated data as in <a href="http://jef.works/blog/2017/05/31/multiclass-diffential-expression-analysis/">Multi-class / Multi-group Differential Expression Analysis</a> except Iâ€™ve modified 2 genes so that they will in combination identify cells in group1.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">set.seed</span><span class="p">(</span><span class="m">0</span><span class="p">)</span><span class="w">
</span><span class="n">G</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">5</span><span class="w">
</span><span class="n">N</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">30</span><span class="w">
</span><span class="n">M</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1000</span><span class="w">
</span><span class="n">initmean</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">5</span><span class="w">
</span><span class="n">initvar</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">10</span><span class="w">
</span><span class="n">mat</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">matrix</span><span class="p">(</span><span class="n">rnorm</span><span class="p">(</span><span class="n">N</span><span class="o">*</span><span class="n">M</span><span class="o">*</span><span class="n">G</span><span class="p">,</span><span class="w"> </span><span class="n">initmean</span><span class="p">,</span><span class="w"> </span><span class="n">initvar</span><span class="p">),</span><span class="w"> </span><span class="n">M</span><span class="p">,</span><span class="w"> </span><span class="n">N</span><span class="o">*</span><span class="n">G</span><span class="p">)</span><span class="w">
</span><span class="n">rownames</span><span class="p">(</span><span class="n">mat</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s1">'gene'</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="n">M</span><span class="p">)</span><span class="w">
</span><span class="n">colnames</span><span class="p">(</span><span class="n">mat</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s1">'cell'</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="p">(</span><span class="n">N</span><span class="o">*</span><span class="n">G</span><span class="p">))</span><span class="w">
</span><span class="n">group</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">factor</span><span class="p">(</span><span class="n">sapply</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="n">G</span><span class="p">,</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="n">paste0</span><span class="p">(</span><span class="s1">'group'</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">),</span><span class="w"> </span><span class="n">N</span><span class="p">)))</span><span class="w">
</span><span class="nf">names</span><span class="p">(</span><span class="n">group</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">colnames</span><span class="p">(</span><span class="n">mat</span><span class="p">)</span><span class="w">

</span><span class="n">set.seed</span><span class="p">(</span><span class="m">0</span><span class="p">)</span><span class="w">
</span><span class="n">upreg</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">5</span><span class="w">
</span><span class="n">upregvar</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">10</span><span class="w">
</span><span class="n">ng</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">100</span><span class="w">

</span><span class="n">diff</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lapply</span><span class="p">(</span><span class="m">1</span><span class="o">:</span><span class="n">G</span><span class="p">,</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">diff</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">mat</span><span class="p">)[(((</span><span class="n">x</span><span class="m">-1</span><span class="p">)</span><span class="o">*</span><span class="n">ng</span><span class="p">)</span><span class="m">+1</span><span class="p">)</span><span class="o">:</span><span class="p">(((</span><span class="n">x</span><span class="m">-1</span><span class="p">)</span><span class="o">*</span><span class="n">ng</span><span class="p">)</span><span class="o">+</span><span class="n">ng</span><span class="p">)]</span><span class="w">
    </span><span class="n">mat</span><span class="p">[</span><span class="n">diff</span><span class="p">,</span><span class="w"> </span><span class="n">group</span><span class="o">==</span><span class="n">paste0</span><span class="p">(</span><span class="s1">'group'</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">)]</span><span class="w"> </span><span class="o">&lt;&lt;-</span><span class="w"> </span><span class="n">mat</span><span class="p">[</span><span class="n">diff</span><span class="p">,</span><span class="w"> </span><span class="n">group</span><span class="o">==</span><span class="n">paste0</span><span class="p">(</span><span class="s1">'group'</span><span class="p">,</span><span class="w"> </span><span class="n">x</span><span class="p">)]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">rnorm</span><span class="p">(</span><span class="n">ng</span><span class="p">,</span><span class="w"> </span><span class="n">upreg</span><span class="p">,</span><span class="w"> </span><span class="n">upregvar</span><span class="p">)</span><span class="w">
    </span><span class="nf">return</span><span class="p">(</span><span class="n">diff</span><span class="p">)</span><span class="w">
</span><span class="p">})</span><span class="w">
</span><span class="nf">names</span><span class="p">(</span><span class="n">diff</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s1">'group'</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="n">G</span><span class="p">)</span><span class="w">

</span><span class="n">diff2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lapply</span><span class="p">(</span><span class="m">2</span><span class="o">:</span><span class="p">(</span><span class="n">G</span><span class="m">-1</span><span class="p">),</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">x</span><span class="o">+</span><span class="n">G</span><span class="w">
    </span><span class="n">diff</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">mat</span><span class="p">)[(((</span><span class="n">y</span><span class="m">-1</span><span class="p">)</span><span class="o">*</span><span class="n">ng</span><span class="p">)</span><span class="m">+1</span><span class="p">)</span><span class="o">:</span><span class="p">(((</span><span class="n">y</span><span class="m">-1</span><span class="p">)</span><span class="o">*</span><span class="n">ng</span><span class="p">)</span><span class="o">+</span><span class="n">ng</span><span class="p">)]</span><span class="w">
    </span><span class="n">mat</span><span class="p">[</span><span class="n">diff</span><span class="p">,</span><span class="w"> </span><span class="n">group</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s2">"group"</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="n">x</span><span class="p">)]</span><span class="w"> </span><span class="o">&lt;&lt;-</span><span class="w"> </span><span class="n">mat</span><span class="p">[</span><span class="n">diff</span><span class="p">,</span><span class="w"> </span><span class="n">group</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="n">paste0</span><span class="p">(</span><span class="s2">"group"</span><span class="p">,</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="n">x</span><span class="p">)]</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">rnorm</span><span class="p">(</span><span class="n">ng</span><span class="p">,</span><span class="w"> </span><span class="n">upreg</span><span class="p">,</span><span class="w"> </span><span class="n">upregvar</span><span class="p">)</span><span class="w">
    </span><span class="nf">return</span><span class="p">(</span><span class="n">diff</span><span class="p">)</span><span class="w">
</span><span class="p">})</span><span class="w">

</span><span class="c1">## remove negative values in this simulation to be more like real gene expression data</span><span class="w">
</span><span class="n">mat</span><span class="p">[</span><span class="n">mat</span><span class="o">&lt;</span><span class="m">0</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">0</span><span class="w">

</span><span class="c1">## add in fake perfect FACs markers</span><span class="w">
</span><span class="n">ct</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"group1"</span><span class="w">
</span><span class="n">markers.true</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.numeric</span><span class="p">(</span><span class="n">group</span><span class="o">==</span><span class="n">ct</span><span class="p">)</span><span class="w"> 
</span><span class="n">set.seed</span><span class="p">(</span><span class="m">0</span><span class="p">)</span><span class="w">
</span><span class="n">vi1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sample</span><span class="p">(</span><span class="n">which</span><span class="p">(</span><span class="n">markers.true</span><span class="o">==</span><span class="m">1</span><span class="p">),</span><span class="w"> </span><span class="m">5</span><span class="p">)</span><span class="w">
</span><span class="n">vi2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sample</span><span class="p">(</span><span class="n">setdiff</span><span class="p">(</span><span class="n">which</span><span class="p">(</span><span class="n">markers.true</span><span class="o">==</span><span class="m">1</span><span class="p">),</span><span class="w"> </span><span class="n">vi1</span><span class="p">),</span><span class="w"> </span><span class="m">5</span><span class="p">)</span><span class="w">
</span><span class="n">markers1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">markers2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">markers.true</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="m">0.1</span><span class="w">
</span><span class="n">markers1</span><span class="p">[</span><span class="n">vi1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">0</span><span class="w">
</span><span class="n">markers2</span><span class="p">[</span><span class="n">vi2</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">0</span><span class="w">
</span><span class="n">mat</span><span class="p">[</span><span class="m">1</span><span class="p">,]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mat</span><span class="p">[</span><span class="m">1</span><span class="p">,]</span><span class="o">*</span><span class="n">markers1</span><span class="w">
</span><span class="n">mat</span><span class="p">[</span><span class="m">10</span><span class="p">,]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mat</span><span class="p">[</span><span class="m">10</span><span class="p">,]</span><span class="o">*</span><span class="n">markers2</span><span class="w">
</span><span class="c1">## so true FACs genes for group1 should be 1 and 10</span><span class="w">

</span><span class="n">heatmap</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span><span class="w"> </span><span class="n">Rowv</span><span class="o">=</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">Colv</span><span class="o">=</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="n">colorRampPalette</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s1">'blue'</span><span class="p">,</span><span class="w"> </span><span class="s1">'white'</span><span class="p">,</span><span class="w"> </span><span class="s1">'red'</span><span class="p">))(</span><span class="m">100</span><span class="p">),</span><span class="w"> </span><span class="n">scale</span><span class="o">=</span><span class="s2">"none"</span><span class="p">,</span><span class="w"> </span><span class="n">ColSideColors</span><span class="o">=</span><span class="n">rainbow</span><span class="p">(</span><span class="n">G</span><span class="p">)[</span><span class="n">group</span><span class="p">],</span><span class="w"> </span><span class="n">labCol</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="n">labRow</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://localhost:4000/assets/blog/simall-1.png" alt="" /></p>

<h2 id="machine-learning-with-mlr">Machine learning with <code class="highlighter-rouge">mlr</code></h2>

<p><a href="https://github.com/mlr-org/mlr/">The <code class="highlighter-rouge">mlr</code> (Machine Learning in R) package</a> very nicely pulls in machine learning approaches from other packages into a single integrated framework for machine learning experiments in R. They also have lots of great tutorials to help you get started](<a href="https://mlr-org.github.io/mlr-tutorial/release/html/index.html">https://mlr-org.github.io/mlr-tutorial/release/html/index.html</a>).</p>

<p>First, we can define a classification task as classify cells as <code class="highlighter-rouge">group1</code>.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">library</span><span class="p">(</span><span class="n">mlr</span><span class="p">)</span><span class="w">

</span><span class="c1">## Create data frame with data</span><span class="w">
</span><span class="n">ct</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"group1"</span><span class="w">
</span><span class="n">mat.test</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="n">t</span><span class="p">(</span><span class="n">mat</span><span class="p">))</span><span class="w">
</span><span class="n">mat.test</span><span class="o">$</span><span class="n">celltype</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">group</span><span class="p">[</span><span class="n">rownames</span><span class="p">(</span><span class="n">mat.test</span><span class="p">)]</span><span class="o">==</span><span class="n">ct</span><span class="w">
</span><span class="c1">## Define the task</span><span class="w">
</span><span class="c1">## Specify the type of analysis (e.g. classification) and provide data and response variable</span><span class="w">
</span><span class="n">task</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">makeClassifTask</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mat.test</span><span class="p">,</span><span class="w"> </span><span class="n">target</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"celltype"</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>We will use <code class="highlighter-rouge">mlr</code>â€™s function <code class="highlighter-rouge">generateFilterValuesData</code> to perform feature selection. A table showing all available feature selection methods can be found <a href="https://mlr-org.github.io/mlr-tutorial/release/html/filter_methods/index.html">here</a>.</p>

<p>I will select features based on their <a href="http://blog.datadive.net/selecting-good-features-part-iii-random-forests/">importance in a random forest classifier</a>. Feature selection based on a decision tree-based approach such as with a random forest classifier makes sense intuitively if we wanted to find a set of potential surface markers for FACs and had a matrix of gene expression for cell surface protein encoding genes. We want to build a decision tree or group of decision trees that will tell if that us if we gate cells on expression of X and then Y, we will get our population of interest.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">method</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s1">'cforest.importance'</span><span class="w">
</span><span class="n">fv</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">generateFilterValuesData</span><span class="p">(</span><span class="n">task</span><span class="p">,</span><span class="w"> </span><span class="n">method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">method</span><span class="p">)</span><span class="w">
</span><span class="n">results</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">fv</span><span class="o">$</span><span class="n">data</span><span class="w">
</span><span class="n">results</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">results</span><span class="p">[</span><span class="n">order</span><span class="p">(</span><span class="n">results</span><span class="p">[,</span><span class="m">3</span><span class="p">],</span><span class="w"> </span><span class="n">decreasing</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">),]</span><span class="w">
</span><span class="n">head</span><span class="p">(</span><span class="n">results</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##      name    type cforest.importance
## 1   gene1 numeric        0.004763636
## 3   gene3 numeric        0.003745455
## 4   gene4 numeric        0.003418182
## 98 gene98 numeric        0.003272727
## 91 gene91 numeric        0.003200000
## 10 gene10 numeric        0.003054545
</code></pre></div></div>

<p>We can filter for genes with non-zero importance and visualize the results.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">0</span><span class="w">
</span><span class="n">pv.sig</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">na.omit</span><span class="p">(</span><span class="n">results</span><span class="o">$</span><span class="n">name</span><span class="p">[</span><span class="n">results</span><span class="p">[,</span><span class="m">3</span><span class="p">]</span><span class="o">&gt;</span><span class="n">t</span><span class="p">])</span><span class="w">
</span><span class="n">heatmap</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">pv.sig</span><span class="p">,],</span><span class="w"> </span><span class="n">Rowv</span><span class="o">=</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">Colv</span><span class="o">=</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="n">colorRampPalette</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s1">'blue'</span><span class="p">,</span><span class="w"> </span><span class="s1">'white'</span><span class="p">,</span><span class="w"> </span><span class="s1">'red'</span><span class="p">))(</span><span class="m">100</span><span class="p">),</span><span class="w"> </span><span class="n">scale</span><span class="o">=</span><span class="s2">"none"</span><span class="p">,</span><span class="w"> </span><span class="n">ColSideColors</span><span class="o">=</span><span class="n">rainbow</span><span class="p">(</span><span class="n">G</span><span class="p">)[</span><span class="n">group</span><span class="p">],</span><span class="w"> </span><span class="n">labCol</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="n">labRow</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://localhost:4000/assets/blog/mlr3-1.png" alt="" /></p>

<p>Now letâ€™s repeat this for each subpopulation.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">0</span><span class="w">
</span><span class="n">method</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s1">'cforest.importance'</span><span class="w">
</span><span class="n">pv.sig</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lapply</span><span class="p">(</span><span class="n">levels</span><span class="p">(</span><span class="n">group</span><span class="p">),</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">ct</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">mat.test</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="n">as.matrix</span><span class="p">(</span><span class="n">t</span><span class="p">(</span><span class="n">mat</span><span class="p">)))</span><span class="w">
    </span><span class="n">mat.test</span><span class="o">$</span><span class="n">celltype</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">group</span><span class="p">[</span><span class="n">rownames</span><span class="p">(</span><span class="n">mat.test</span><span class="p">)]</span><span class="o">==</span><span class="n">ct</span><span class="w">
    </span><span class="n">task</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">makeClassifTask</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mat.test</span><span class="p">,</span><span class="w"> </span><span class="n">target</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"celltype"</span><span class="p">)</span><span class="w">
    </span><span class="n">fv</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">generateFilterValuesData</span><span class="p">(</span><span class="n">task</span><span class="p">,</span><span class="w"> </span><span class="n">method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">method</span><span class="p">)</span><span class="w">
    </span><span class="n">results</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">fv</span><span class="o">$</span><span class="n">data</span><span class="w">
    </span><span class="n">results</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">results</span><span class="p">[</span><span class="n">order</span><span class="p">(</span><span class="n">results</span><span class="p">[,</span><span class="m">3</span><span class="p">],</span><span class="w"> </span><span class="n">decreasing</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">),]</span><span class="w">
    </span><span class="n">pv.sig</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">na.omit</span><span class="p">(</span><span class="n">results</span><span class="o">$</span><span class="n">name</span><span class="p">[</span><span class="n">results</span><span class="p">[,</span><span class="m">3</span><span class="p">]</span><span class="o">&gt;</span><span class="n">t</span><span class="p">])</span><span class="w">
</span><span class="p">})</span><span class="w">
</span><span class="nf">names</span><span class="p">(</span><span class="n">pv.sig</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">levels</span><span class="p">(</span><span class="n">group</span><span class="p">)</span><span class="w">
</span><span class="n">heatmap</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">unique</span><span class="p">(</span><span class="n">unlist</span><span class="p">(</span><span class="n">pv.sig</span><span class="p">)),],</span><span class="w"> </span><span class="n">Rowv</span><span class="o">=</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">Colv</span><span class="o">=</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">col</span><span class="o">=</span><span class="n">colorRampPalette</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s1">'blue'</span><span class="p">,</span><span class="w"> </span><span class="s1">'white'</span><span class="p">,</span><span class="w"> </span><span class="s1">'red'</span><span class="p">))(</span><span class="m">100</span><span class="p">),</span><span class="w"> </span><span class="n">scale</span><span class="o">=</span><span class="s2">"none"</span><span class="p">,</span><span class="w"> </span><span class="n">ColSideColors</span><span class="o">=</span><span class="n">rainbow</span><span class="p">(</span><span class="n">G</span><span class="p">)[</span><span class="n">group</span><span class="p">],</span><span class="w"> </span><span class="n">labCol</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="n">labRow</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://localhost:4000/assets/blog/mlr4-1.png" alt="" /></p>

<p>We can assess our performance by comparing our identified important genes to those we simulated as important.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">perf</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">pv.sig</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">predtrue</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">unique</span><span class="p">(</span><span class="n">unlist</span><span class="p">(</span><span class="n">pv.sig</span><span class="p">))</span><span class="w"> </span><span class="c1">## predicted differentially expressed genes</span><span class="w">
    </span><span class="n">predfalse</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">setdiff</span><span class="p">(</span><span class="n">rownames</span><span class="p">(</span><span class="n">mat</span><span class="p">),</span><span class="w"> </span><span class="n">predtrue</span><span class="p">)</span><span class="w"> </span><span class="c1">## predicted not differentially expressed genes</span><span class="w">
    </span><span class="n">true</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">unlist</span><span class="p">(</span><span class="n">diff</span><span class="p">),</span><span class="w"> </span><span class="n">unlist</span><span class="p">(</span><span class="n">diff2</span><span class="p">))</span><span class="w"> </span><span class="c1">## true differentially expressed genes</span><span class="w">
    </span><span class="n">false</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">setdiff</span><span class="p">(</span><span class="n">rownames</span><span class="p">(</span><span class="n">mat</span><span class="p">),</span><span class="w"> </span><span class="n">true</span><span class="p">)</span><span class="w"> </span><span class="c1">## true not differentially expressed genes</span><span class="w">
    </span><span class="n">TP</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">predtrue</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="n">true</span><span class="p">)</span><span class="w">
    </span><span class="n">TN</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">predfalse</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="n">false</span><span class="p">)</span><span class="w">
    </span><span class="n">FP</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">predtrue</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="n">false</span><span class="p">)</span><span class="w">
    </span><span class="n">FN</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">predfalse</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="n">true</span><span class="p">)</span><span class="w">
    </span><span class="n">sens</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">TP</span><span class="o">/</span><span class="p">(</span><span class="n">TP</span><span class="o">+</span><span class="n">FN</span><span class="p">)</span><span class="w">
    </span><span class="n">spec</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">TN</span><span class="o">/</span><span class="p">(</span><span class="n">TN</span><span class="o">+</span><span class="n">FP</span><span class="p">)</span><span class="w">
    </span><span class="n">prec</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">TP</span><span class="o">/</span><span class="p">(</span><span class="n">TP</span><span class="o">+</span><span class="n">FP</span><span class="p">)</span><span class="w">
    </span><span class="n">fdr</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">FP</span><span class="o">/</span><span class="p">(</span><span class="n">TP</span><span class="o">+</span><span class="n">FP</span><span class="p">)</span><span class="w">
    </span><span class="n">acc</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="p">(</span><span class="n">TP</span><span class="o">+</span><span class="n">TN</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="n">TP</span><span class="o">+</span><span class="n">FP</span><span class="o">+</span><span class="n">FN</span><span class="o">+</span><span class="n">TN</span><span class="p">)</span><span class="w">
    </span><span class="nf">return</span><span class="p">(</span><span class="n">data.frame</span><span class="p">(</span><span class="n">sens</span><span class="p">,</span><span class="w"> </span><span class="n">spec</span><span class="p">,</span><span class="w"> </span><span class="n">prec</span><span class="p">,</span><span class="w"> </span><span class="n">fdr</span><span class="p">,</span><span class="w"> </span><span class="n">acc</span><span class="p">))</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="n">print</span><span class="p">(</span><span class="n">perf</span><span class="p">(</span><span class="n">pv.sig</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##     sens  spec      prec       fdr   acc
## 1 0.8475 0.385 0.8464419 0.1535581 0.755
</code></pre></div></div>

<p>Looks like we did pretty well!</p>

<p>But letâ€™s get back to our FACs problem and say we really want to identify just 2 markers that will help us sort out group1 cells from all others. Letâ€™s calculate the 10-fold cross-validated error rate of simple decision tree classifier (<code class="highlighter-rouge">classif.rpart</code>) with preceding feature selection. We will again use <code class="highlighter-rouge">cforest.importance</code> as importance measure and select the 2 features with highest importance. We can then look at which features were consistently selected in our cross-validations</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ct</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"group1"</span><span class="w">
</span><span class="n">mat.test</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="n">t</span><span class="p">(</span><span class="n">mat</span><span class="p">))</span><span class="w">
</span><span class="n">mat.test</span><span class="o">$</span><span class="n">celltype</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">group</span><span class="p">[</span><span class="n">rownames</span><span class="p">(</span><span class="n">mat.test</span><span class="p">)]</span><span class="o">==</span><span class="n">ct</span><span class="w">
</span><span class="n">task</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">makeClassifTask</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mat.test</span><span class="p">,</span><span class="w"> </span><span class="n">target</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"celltype"</span><span class="p">)</span><span class="w">

</span><span class="c1">## fuse learner with feature selection</span><span class="w">
</span><span class="n">lrn</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">makeFilterWrapper</span><span class="p">(</span><span class="n">learner</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"classif.rpart"</span><span class="p">,</span><span class="w"> </span><span class="n">fw.method</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"cforest.importance"</span><span class="p">,</span><span class="w"> </span><span class="n">fw.abs</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">2</span><span class="p">)</span><span class="w"> </span><span class="c1">## 2 features only</span><span class="w">
</span><span class="n">rdesc</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">makeResampleDesc</span><span class="p">(</span><span class="s2">"CV"</span><span class="p">,</span><span class="w"> </span><span class="n">iters</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">10</span><span class="p">)</span><span class="w">
</span><span class="n">r</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">resample</span><span class="p">(</span><span class="n">learner</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">lrn</span><span class="p">,</span><span class="w"> </span><span class="n">task</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">task</span><span class="p">,</span><span class="w"> </span><span class="n">resampling</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">rdesc</span><span class="p">,</span><span class="w"> </span><span class="n">show.info</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">FALSE</span><span class="p">,</span><span class="w"> </span><span class="n">models</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="kc">TRUE</span><span class="p">)</span><span class="w">

</span><span class="c1">## get features used</span><span class="w">
</span><span class="n">sfeats</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sapply</span><span class="p">(</span><span class="n">r</span><span class="o">$</span><span class="n">models</span><span class="p">,</span><span class="w"> </span><span class="n">getFilteredFeatures</span><span class="p">)</span><span class="w">
</span><span class="n">markers</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sort</span><span class="p">(</span><span class="n">table</span><span class="p">(</span><span class="n">sfeats</span><span class="p">),</span><span class="w"> </span><span class="n">decreasing</span><span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span><span class="w">
</span><span class="n">print</span><span class="p">(</span><span class="n">markers</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## sfeats
##  gene10   gene1   gene3  gene91  gene98  gene39  gene41  gene48 gene699 
##       6       4       2       2       2       1       1       1       1
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## take best 2 across CVs</span><span class="w">
</span><span class="n">marker</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">names</span><span class="p">(</span><span class="n">markers</span><span class="p">)[</span><span class="m">1</span><span class="o">:</span><span class="m">2</span><span class="p">]</span><span class="w">

</span><span class="c1">## plot</span><span class="w">
</span><span class="n">smoothScatter</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">marker</span><span class="p">[</span><span class="m">1</span><span class="p">],],</span><span class="w"> </span><span class="n">mat</span><span class="p">[</span><span class="n">marker</span><span class="p">[</span><span class="m">2</span><span class="p">],],</span><span class="w"> 
              </span><span class="n">col</span><span class="o">=</span><span class="nf">as.numeric</span><span class="p">(</span><span class="n">group</span><span class="p">[</span><span class="n">colnames</span><span class="p">(</span><span class="n">mat</span><span class="p">)]</span><span class="o">==</span><span class="n">ct</span><span class="p">)</span><span class="m">+1</span><span class="p">,</span><span class="w"> </span><span class="n">pch</span><span class="o">=</span><span class="m">16</span><span class="p">,</span><span class="w">
              </span><span class="n">xlab</span><span class="o">=</span><span class="n">marker</span><span class="p">[</span><span class="m">1</span><span class="p">],</span><span class="w"> </span><span class="n">ylab</span><span class="o">=</span><span class="n">marker</span><span class="p">[</span><span class="m">2</span><span class="p">])</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://localhost:4000/assets/blog/mlr6-1.png" alt="" /></p>

<p>So for FACs, we would choose high <code class="highlighter-rouge">gene1</code> or <code class="highlighter-rouge">gene10</code> to sort for cells in <code class="highlighter-rouge">group1</code>!</p>

<h2 id="comparison">Comparison</h2>

<p>Letâ€™s see how our results would be different if we just picked 2 most differentially expressed genes by a simple Wilcox rank sum test.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ct</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s2">"group1"</span><span class="w">
</span><span class="c1">## run wilcox test on all genes, get p value</span><span class="w">
</span><span class="n">wilcox.pv</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">unlist</span><span class="p">(</span><span class="n">lapply</span><span class="p">(</span><span class="nf">seq_along</span><span class="p">(</span><span class="n">rownames</span><span class="p">(</span><span class="n">mat</span><span class="p">)),</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">g</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mat</span><span class="p">[</span><span class="n">g</span><span class="p">,</span><span class="w"> </span><span class="n">group</span><span class="p">[</span><span class="n">colnames</span><span class="p">(</span><span class="n">mat</span><span class="p">)]</span><span class="o">==</span><span class="n">ct</span><span class="p">]</span><span class="w">
    </span><span class="n">y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mat</span><span class="p">[</span><span class="n">g</span><span class="p">,</span><span class="w"> </span><span class="n">group</span><span class="p">[</span><span class="n">colnames</span><span class="p">(</span><span class="n">mat</span><span class="p">)]</span><span class="o">!=</span><span class="n">ct</span><span class="p">]</span><span class="w">
    </span><span class="n">pv</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">wilcox.test</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">alternate</span><span class="o">=</span><span class="s2">"less"</span><span class="p">)</span><span class="w">
    </span><span class="n">pv</span><span class="o">$</span><span class="n">p.val</span><span class="w">
</span><span class="p">}))</span><span class="w">
</span><span class="nf">names</span><span class="p">(</span><span class="n">wilcox.pv</span><span class="p">)</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rownames</span><span class="p">(</span><span class="n">mat</span><span class="p">)</span><span class="w">
</span><span class="n">markers</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sort</span><span class="p">(</span><span class="n">wilcox.pv</span><span class="p">,</span><span class="w"> </span><span class="n">decreasing</span><span class="o">=</span><span class="kc">FALSE</span><span class="p">)</span><span class="w">
</span><span class="n">print</span><span class="p">(</span><span class="n">head</span><span class="p">(</span><span class="n">markers</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>##       gene53       gene41       gene98       gene39        gene3 
## 6.698431e-16 1.172235e-14 7.295158e-14 2.024959e-13 3.332489e-13 
##       gene91 
## 4.310527e-13
</code></pre></div></div>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## take best 2 by p value</span><span class="w">
</span><span class="n">marker</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">names</span><span class="p">(</span><span class="n">markers</span><span class="p">)[</span><span class="m">1</span><span class="o">:</span><span class="m">2</span><span class="p">]</span><span class="w">

</span><span class="c1">## plot</span><span class="w">
</span><span class="n">smoothScatter</span><span class="p">(</span><span class="n">mat</span><span class="p">[</span><span class="n">marker</span><span class="p">[</span><span class="m">1</span><span class="p">],],</span><span class="w"> </span><span class="n">mat</span><span class="p">[</span><span class="n">marker</span><span class="p">[</span><span class="m">2</span><span class="p">],],</span><span class="w"> 
              </span><span class="n">col</span><span class="o">=</span><span class="nf">as.numeric</span><span class="p">(</span><span class="n">group</span><span class="p">[</span><span class="n">colnames</span><span class="p">(</span><span class="n">mat</span><span class="p">)]</span><span class="o">==</span><span class="n">ct</span><span class="p">)</span><span class="m">+1</span><span class="p">,</span><span class="w"> </span><span class="n">pch</span><span class="o">=</span><span class="m">16</span><span class="p">,</span><span class="w">
              </span><span class="n">xlab</span><span class="o">=</span><span class="n">marker</span><span class="p">[</span><span class="m">1</span><span class="p">],</span><span class="w"> </span><span class="n">ylab</span><span class="o">=</span><span class="n">marker</span><span class="p">[</span><span class="m">2</span><span class="p">])</span><span class="w">
</span></code></pre></div></div>

<p><img src="http://localhost:4000/assets/blog/mlr7-1.png" alt="" /></p>

<p>So it looks like our machine learning approach is better in this simulation. But of course, this is just a simulation. And in real life, we may have practical considerations like translation rate (not all highly expressed genes become highly expressed proteins) so there are likely other important information we currently donâ€™t integrate in this approach. But consider: how do biologists pick which marker genes to use? Can we formulate that into some kind of machine learning approach? And how can we use machine learning to augment and inform what biologists are already doing?</p>
:ET